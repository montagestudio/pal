module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { expression: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "expression" },
          peg$FAILED,
          [],
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(head, tail) {
                  var result = [head];
                  for (var i = 0; i < tail.length; i++) {
                      result.push(tail[i][2]);
                  }
                  return result;
              },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function() {
                  return [];
              },
          function(expressions) {
                  return expressions;
              },
          null,
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(condition, tail) {
                  if (tail) {
                      var consequent = tail[2];
                      var alternate = tail[6];
                      return {
                          type: "if",
                          args: [condition, consequent, alternate]
                      };
                  } else {
                      return condition;
                  }
              },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          function(head, tail) {
                  for (var i = 0; i < tail.length; i++) {
                      head = {
                          type: BINARY[tail[i][1]],
                          args: [
                              head,
                              tail[i][3]
                          ]
                      }
                  }
                  return head;
              },
          "&&",
          { type: "literal", value: "&&", description: "\"&&\"" },
          "<=>",
          { type: "literal", value: "<=>", description: "\"<=>\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          void 0,
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          function(left, tail) {
                  if (!tail) {
                      return left;
                  } else {
                      var operator = tail[1];
                      var right = tail[3];
                      if (operator === "!=") {
                          return {type: "not", args: [{type: "equals", args: [left, right]}]};
                      } else {
                          return {type: BINARY[operator], args: [left, right]};
                      }
                  }
              },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "rem",
          { type: "literal", value: "rem", description: "\"rem\"" },
          "**",
          { type: "literal", value: "**", description: "\"**\"" },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "%%",
          { type: "literal", value: "%%", description: "\"%%\"" },
          "??",
          { type: "literal", value: "??", description: "\"??\"" },
          "!",
          { type: "literal", value: "!", description: "\"!\"" },
          function(operator, arg) {
                  return {type: UNARY[operator], args: [arg]};
              },
          function(head, tail) {
                  for (var i = 0; i < tail.length; i++) {
                      head = tail[i](head);
                  }
                  return head;
              },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(tail) {
                  return tail;
              },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(arg) {
                  return function (previous) {
                      return {
                          type: "property",
                          args: [
                              previous,
                              arg
                          ]
                      };
                  };
              },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(name, expression) {
                  if (BLOCKS[name]) {
                      return function (previous) {
                          return {
                              type: BLOCKS[name],
                              args: [previous, expression]
                          };
                      }
                  } else if (expression.type === "value") {
                      return function (previous) {
                          return {
                              type: name,
                              args: [previous]
                          };
                      };
                  } else {
                      return function (previous) {
                          return {
                              type: name,
                              args: [
                                  {type: "mapBlock", args: [
                                      previous,
                                      expression
                                  ]}
                              ]
                          };
                      };
                  }
              },
          function(name, args) {
                  return function (previous) {
                      return {
                          type: name,
                          args: [previous].concat(args)
                      };
                  };
              },
          function(index) {
                  return function (previous) {
                      return {
                          type: "property",
                          args: [
                              previous,
                              {type: "literal", value: +index.join("")}
                          ]
                      };
                  };
              },
          function(name) {
                  return function (previous) {
                      return {
                          type: "property",
                          args: [
                              previous,
                              {type: "literal", value: name}
                          ]
                      };
                  };
              },
          function(expression) {
                  return function (previous) {
                      return {
                          type: "with",
                          args: [
                              previous,
                              expression
                          ]
                      };
                  };
              },
          "this",
          { type: "literal", value: "this", description: "\"this\"" },
          function() { return {type: "value"}; },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() { return {type: "literal", value: true}; },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() { return {type: "literal", value: false}; },
          "null",
          { type: "literal", value: "null", description: "\"null\"" },
          function() { return {type: "literal", value: null}; },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          function(label) {
                  return {type: "component", label: label};
              },
          "$",
          { type: "literal", value: "$", description: "\"$\"" },
          function(name) {
                  return {type: "property", args: [
                      {type: "parameters"},
                      {type: "literal", value: name}
                  ]};
              },
          function() {
                  return {type: "parameters"};
              },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          function(name) {
                  return {type: "element", id: name};
              },
          "&",
          { type: "literal", value: "&", description: "\"&\"" },
          function(name, args) {
                  return {type: name, args: args, inline: true};
              },
          "^",
          { type: "literal", value: "^", description: "\"^\"" },
          function(value) {
                  return {type: "parent", args: [value]};
              },
          function(expression) {
                  return expression;
              },
          function(tail) {
                  return tail({type: "value"});
              },
          function() {
                  return {type: "value"};
              },
          { type: "other", description: "word" },
          /^[a-zA-Z_0-9\-]/,
          { type: "class", value: "[a-zA-Z_0-9\\-]", description: "[a-zA-Z_0-9\\-]" },
          { type: "other", description: "string" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          function(chars) { return {type: "literal", value: chars.join("")}; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^'\\\0-\x1F]/,
          { type: "class", value: "[^'\\\\\\0-\\x1F]", description: "[^'\\\\\\0-\\x1F]" },
          "\\'",
          { type: "literal", value: "\\'", description: "\"\\\\'\"" },
          function() { return "'";  },
          /^[^"\\\0-\x1F]/,
          { type: "class", value: "[^\"\\\\\\0-\\x1F]", description: "[^\"\\\\\\0-\\x1F]" },
          "\\\"",
          { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
          function() { return "\"";  },
          "\\\\",
          { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
          function() { return "\\"; },
          "\\/",
          { type: "literal", value: "\\/", description: "\"\\\\/\"" },
          function() { return "/";  },
          "\\b",
          { type: "literal", value: "\\b", description: "\"\\\\b\"" },
          function() { return "\b"; },
          "\\f",
          { type: "literal", value: "\\f", description: "\"\\\\f\"" },
          function() { return "\f"; },
          "\\n",
          { type: "literal", value: "\\n", description: "\"\\\\n\"" },
          function() { return "\n"; },
          "\\r",
          { type: "literal", value: "\\r", description: "\"\\\\r\"" },
          function() { return "\r"; },
          "\\t",
          { type: "literal", value: "\\t", description: "\"\\\\t\"" },
          function() { return "\t"; },
          "\\0",
          { type: "literal", value: "\\0", description: "\"\\\\0\"" },
          function() { return "\0"; },
          "\\u",
          { type: "literal", value: "\\u", description: "\"\\\\u\"" },
          function(digits) {
                  return String.fromCharCode(parseInt(digits, 16));
              },
          /^[0-9a-fA-F]/,
          { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
          function() {
                  return {type: "tuple", args: []};
              },
          function(expressions) {
                  return {type: "tuple", args: expressions};
              },
          function() { return {type: "record", args: []}; },
          function(pairs) { return {type: "record", args: pairs}; },
          function(head, tail) {
                  var result = {};
                  result[head[0]] = head[1];
                  for (var i = 0; i < tail.length; i++) {
                      result[tail[i][2][0]] = tail[i][2][1];
                  }
                  return result;
              },
          function(name, value) { return [name, value]; },
          { type: "other", description: "number" },
          function(parts) {
                  return {type: "literal", value: +parts}
              },
          /^[eE]/,
          { type: "class", value: "[eE]", description: "[eE]" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          { type: "other", description: "whitespace" },
          /^[\t\x0B\f \xA0\uFEFF]/,
          { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
          /^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/,
          { type: "class", value: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]", description: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]" },
          { type: "other", description: "line terminator" },
          /^[\n\r\u2028\u2029]/,
          { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          { type: "any", description: "any character" },
          function(comment) {
                  return comment;
              },
          function() {
                  return null;
              },
          function(blocks) {
                  return {type: "sheet", blocks: blocks};
              },
          function(label, annotation, statements) {
                  return {
                      type: "block",
                      connection: annotation.connection,
                      module: annotation.module,
                      exports: annotation.exports,
                      label: label,
                      statements: statements
                  };
              },
          function(connection, module, exports) {
                  return {
                      connection: {"<": "prototype", ":": "object"}[connection],
                      module: module && module.value,
                      exports: exports !== "" ? exports[1] : undefined
                  };
              },
          function() {
                  return {};
              },
          /^[a-zA-Z_0-9]/,
          { type: "class", value: "[a-zA-Z_0-9]", description: "[a-zA-Z_0-9]" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(statement) {
                  return [statement];
              },
          "on",
          { type: "literal", value: "on", description: "\"on\"" },
          "before",
          { type: "literal", value: "before", description: "\"before\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "->",
          { type: "literal", value: "->", description: "\"->\"" },
          function(when, type, listener) {
                  return {type: "event", when: when, event: type, listener: listener};
              },
          "<->",
          { type: "literal", value: "<->", description: "\"<->\"" },
          "<-",
          { type: "literal", value: "<-", description: "\"<-\"" },
          function(target, arrow, source, descriptor) {
                  var result = {type: STATEMENTS[arrow], args: [
                      target,
                      source
                  ]};
                  if (descriptor.length) {
                      var describe = {};
                      for (var i = 0; i < descriptor.length; i++) {
                          describe[descriptor[i][2]] = descriptor[i][6];
                      }
                      result.descriptor = describe;
                  }
                  return result;
              },
          function(name, expression) {
                  return {type: "unit", name: name, value: expression};
              }
        ],

        peg$bytecode = [
          peg$decode("87#9*\" 3 "),
          peg$decode("!7 +\x8F$ \"!.#\"\"2#3$+7$7C+-%7 +#%'#%$## !$\"# !\"# !,H&!.#\"\"2#3$+7$7C+-%7 +#%'#%$## !$\"# !\"# !\"+3%7C+)%4#6%#\"\"!%$## !$\"# !\"# !"),
          peg$decode("!.&\"\"2&3'+A$7C+7%.(\"\"2(3)+'%4#6*# %$## !$\"# !\"# !*S \"!.&\"\"2&3'+B$7!+8%.(\"\"2(3)+(%4#6+#!!%$## !$\"# !\"# !"),
          peg$decode("!7$+\x96$7C+\x8C%!.-\"\"2-3.+e$7C+[%7 +Q%7C+G%./\"\"2/30+7%7C+-%7 +#%''%$'# !$&# !$%# !$$# !$## !$\"# !\"# !*# \" ,+)%4#61#\"\" %$## !$\"# !\"# !"),
          peg$decode("!7%+\x99$ \"!7C+G$.2\"\"2233+7%7C+-%7%+#%'$%$$# !$## !$\"# !\"# !,R&!7C+G$.2\"\"2233+7%7C+-%7%+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"64\"\"! %$\"# !\"# !"),
          peg$decode("!7&+\x99$ \"!7C+G$.5\"\"2536+7%7C+-%7&+#%'$%$$# !$## !$\"# !\"# !,R&!7C+G$.5\"\"2536+7%7C+-%7&+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"64\"\"! %$\"# !\"# !"),
          peg$decode("!7'+\xDF$!7C+\xBE$!.7\"\"2738*\x8E \".9\"\"293:*\x82 \".;\"\"2;3<*v \"!.=\"\"2=3>+A$!8.@\"\"2@3A9*$$\"\" ?\"# !+#%'\"%$\"# !\"# !*A \".B\"\"2B3C*5 \".D\"\"2D3E*) \".F\"\"2F3G+! (%+7%7C+-%7'+#%'$%$$# !$## !$\"# !\"# !*# \" ,+)%4\"6H\"\"! %$\"# !\"# !"),
          peg$decode("!7(+\xBD$ \"!7C+Y$!.I\"\"2I3J*) \".@\"\"2@3A+! (%+7%7C+-%7(+#%'$%$$# !$## !$\"# !\"# !,d&!7C+Y$!.I\"\"2I3J*) \".@\"\"2@3A+! (%+7%7C+-%7(+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"64\"\"! %$\"# !\"# !"),
          peg$decode("!7)+\xED$ \"!7C+q$!.K\"\"2K3L*A \".M\"\"2M3N*5 \".O\"\"2O3P*) \".Q\"\"2Q3R+! (%+7%7C+-%7)+#%'$%$$# !$## !$\"# !\"# !,|&!7C+q$!.K\"\"2K3L*A \".M\"\"2M3N*5 \".O\"\"2O3P*) \".Q\"\"2Q3R+! (%+7%7C+-%7)+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"64\"\"! %$\"# !\"# !"),
          peg$decode("!7*+\xD5$ \"!7C+e$!.S\"\"2S3T*5 \".U\"\"2U3V*) \".W\"\"2W3X+! (%+7%7C+-%7*+#%'$%$$# !$## !$\"# !\"# !,p&!7C+e$!.S\"\"2S3T*5 \".U\"\"2U3V*) \".W\"\"2W3X+! (%+7%7C+-%7*+#%'$%$$# !$## !$\"# !\"# !\"+)%4\"64\"\"! %$\"# !\"# !"),
          peg$decode("!7++\x99$ \"!7C+G$.Y\"\"2Y3Z+7%7C+-%7++#%'$%$$# !$## !$\"# !\"# !,R&!7C+G$.Y\"\"2Y3Z+7%7C+-%7++#%'$%$$# !$## !$\"# !\"# !\"+)%4\"64\"\"! %$\"# !\"# !"),
          peg$decode("!!.[\"\"2[3\\*5 \".I\"\"2I3J*) \".@\"\"2@3A+! (%+3$7++)%4\"6]\"\"! %$\"# !\"# !*# \"7,"),
          peg$decode("!7/+;$ \"7-,#&7-\"+)%4\"6^\"\"! %$\"# !\"# !"),
          peg$decode("!._\"\"2_3`+2$7.+(%4\"6a\"! %$\"# !\"# !*S \"!.b\"\"2b3c+B$7 +8%.d\"\"2d3e+(%4#6f#!!%$## !$\"# !\"# !"),
          peg$decode("!!70+! (%+g$.g\"\"2g3h+W%7C+M%7 +C%7C+9%.i\"\"2i3j+)%4&6k&\"%\"%$&# !$%# !$$# !$## !$\"# !\"# !*\xC8 \"!!70+! (%+3$7\"+)%4\"6l\"\"! %$\"# !\"# !*\xA1 \"!7?+' 4!6m!! %*\x8F \"!!70+! (%+' 4!6n!! %*w \"!76+' 4!6o!! %*e \"!77+' 4!6o!! %*S \"!.&\"\"2&3'+B$7 +8%.(\"\"2(3)+(%4#6o#!!%$## !$\"# !\"# !"),
          peg$decode("76*\u01DC \"77*\u01D6 \"71*\u01D0 \"7:*\u01CA \"!.p\"\"2p3q+& 4!6r! %*\u01B3 \"!.s\"\"2s3t+& 4!6u! %*\u019C \"!.v\"\"2v3w+& 4!6x! %*\u0185 \"!.y\"\"2y3z+& 4!6{! %*\u016E \"!.|\"\"2|3}+8$!7J+! (%+(%4\"6~\"! %$\"# !\"# !*\u0142 \"!.\"\"23\x80+8$!70+! (%+(%4\"6\x81\"! %$\"# !\"# !*\u0116 \"!.\"\"23\x80+& 4!6\x82! %*\xFF \"!.\x83\"\"2\x833\x84+8$!70+! (%+(%4\"6\x85\"! %$\"# !\"# !*\xD3 \"!.\x86\"\"2\x863\x87+C$!70+! (%+3%7\"+)%4#6\x88#\"! %$## !$\"# !\"# !*\x9C \"!.\x89\"\"2\x893\x8A+2$7/+(%4\"6\x8B\"! %$\"# !\"# !*v \"!.&\"\"2&3'+B$7 +8%.(\"\"2(3)+(%4#6\x8C#!!%$## !$\"# !\"# !*@ \"!7.+' 4!6\x8D!! %*. \"! \"+& 4!6\x8E! %"),
          peg$decode("8 \"0\x90\"\"1!3\x91+,$,)&0\x90\"\"1!3\x91\"\"\" !9*\" 3\x8F"),
          peg$decode("8!.\x93\"\"2\x933\x94+J$ \"72,#&72\"+8%.\x93\"\"2\x933\x94+(%4#6\x95#!!%$## !$\"# !\"# !*[ \"!.\x96\"\"2\x963\x97+J$ \"73,#&73\"+8%.\x96\"\"2\x963\x97+(%4#6\x95#!!%$## !$\"# !\"# !9*\" 3\x92"),
          peg$decode("0\x98\"\"1!3\x99*: \"!.\x9A\"\"2\x9A3\x9B+& 4!6\x9C! %*# \"74"),
          peg$decode("0\x9D\"\"1!3\x9E*: \"!.\x9F\"\"2\x9F3\xA0+& 4!6\xA1! %*# \"74"),
          peg$decode("!.\xA2\"\"2\xA23\xA3+& 4!6\xA4! %*\u0113 \"!.\xA5\"\"2\xA53\xA6+& 4!6\xA7! %*\xFC \"!.\xA8\"\"2\xA83\xA9+& 4!6\xAA! %*\xE5 \"!.\xAB\"\"2\xAB3\xAC+& 4!6\xAD! %*\xCE \"!.\xAE\"\"2\xAE3\xAF+& 4!6\xB0! %*\xB7 \"!.\xB1\"\"2\xB13\xB2+& 4!6\xB3! %*\xA0 \"!.\xB4\"\"2\xB43\xB5+& 4!6\xB6! %*\x89 \"!.\xB7\"\"2\xB73\xB8+& 4!6\xB9! %*r \"!.\xBA\"\"2\xBA3\xBB+a$!!75+A$75+7%75+-%75+#%'$%$$# !$## !$\"# !\"# !+! (%+(%4\"6\xBC\"! %$\"# !\"# !"),
          peg$decode("0\xBD\"\"1!3\xBE"),
          peg$decode("!.b\"\"2b3c+A$7C+7%.d\"\"2d3e+'%4#6\xBF# %$## !$\"# !\"# !*g \"!.b\"\"2b3c+V$7C+L%7!+B%7C+8%.d\"\"2d3e+(%4%6\xC0%!\"%$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!.g\"\"2g3h+K$7C+A%.i\"\"2i3j+1%7C+'%4$6\xC1$ %$$# !$## !$\"# !\"# !*g \"!.g\"\"2g3h+V$7C+L%78+B%.i\"\"2i3j+2%7C+(%4%6\xC2%!\"%$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!79+\x85$ \"!.#\"\"2#3$+7$7C+-%79+#%'#%$## !$\"# !\"# !,H&!.#\"\"2#3$+7$7C+-%79+#%'#%$## !$\"# !\"# !\"+)%4\"6\xC3\"\"! %$\"# !\"# !"),
          peg$decode("!!70+! (%+M$./\"\"2/30+=%7C+3%7 +)%4$6\xC4$\"# %$$# !$## !$\"# !\"# !"),
          peg$decode("8!!7;+! (%+' 4!6\xC6!! %9*\" 3\xC5"),
          peg$decode("!7<+7$7=+-%7>+#%'#%$## !$\"# !\"# !*Y \"!7<+-$7=+#%'\"%$\"# !\"# !*> \"!7<+-$7>+#%'\"%$\"# !\"# !*# \"7<"),
          peg$decode("!7B+-$7?+#%'\"%$\"# !\"# !*o \"7A*i \"!.@\"\"2@3A+7$7B+-%7?+#%'#%$## !$\"# !\"# !*> \"!.@\"\"2@3A+-$7A+#%'\"%$\"# !\"# !"),
          peg$decode("!._\"\"2_3`+-$7?+#%'\"%$\"# !\"# !"),
          peg$decode("!7@+-$7?+#%'\"%$\"# !\"# !"),
          peg$decode(" \"7A+&$,#&7A\"\"\" !"),
          peg$decode("!0\xC7\"\"1!3\xC8+9$0\xC9\"\"1!3\xCA*# \" ,+#%'\"%$\"# !\"# !"),
          peg$decode("0\xCB\"\"1!3\xCC"),
          peg$decode("0\xCD\"\"1!3\xCE"),
          peg$decode(" \"7D*# \"7E,)&7D*# \"7E\""),
          peg$decode("80\xD0\"\"1!3\xD1*) \"0\xD2\"\"1!3\xD39*\" 3\xCF"),
          peg$decode("80\xD5\"\"1!3\xD69*\" 3\xD4"),
          peg$decode("!7C+\xC6$.\xD7\"\"2\xD73\xD8+\xB6%! \"!!8.\xD9\"\"2\xD93\xDA9*$$\"\" ?\"# !+2$-\"\"1!3\xDB+#%'\"%$\"# !\"# !,Q&!!8.\xD9\"\"2\xD93\xDA9*$$\"\" ?\"# !+2$-\"\"1!3\xDB+#%'\"%$\"# !\"# !\"+! (%+B%.\xD9\"\"2\xD93\xDA+2%7C+(%4%6\xDC%!\"%$%# !$$# !$## !$\"# !\"# !*. \"!7C+& 4!6\xDD! %"),
          peg$decode("!7C+D$ \"7H,#&7H\"+2%7C+(%4#6\xDE#!!%$## !$\"# !\"# !"),
          peg$decode("!.|\"\"2|3}+\x92$!7J+! (%+\x82%7C+x%7I*# \" ,+h%.g\"\"2g3h+X%7C+N%7K+D%.i\"\"2i3j+4%7C+*%4)6\xDF)#'%\"%$)# !$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !"),
          peg$decode("!.=\"\"2=3>*) \"./\"\"2/30+\x91$7C+\x87%71*# \" ,+w%7C+m%!!8.g\"\"2g3h9*$$\"\" ?\"# !+-$7 +#%'\"%$\"# !\"# !*# \" ,+4%7C+*%4&6\xE0&#%#!%$&# !$%# !$$# !$## !$\"# !\"# !*. \"!7C+& 4!6\xE1! %"),
          peg$decode("! \"0\xE2\"\"1!3\xE3+,$,)&0\xE2\"\"1!3\xE3\"\"\" !+\xA1$ \"!./\"\"2/30+H$ \"0\xE2\"\"1!3\xE3+,$,)&0\xE2\"\"1!3\xE3\"\"\" !+#%'\"%$\"# !\"# !,Y&!./\"\"2/30+H$ \"0\xE2\"\"1!3\xE3+,$,)&0\xE2\"\"1!3\xE3\"\"\" !+#%'\"%$\"# !\"# !\"+#%'\"%$\"# !\"# !"),
          peg$decode("!7L+\xC3$7C+\xB9% \"!.\xE4\"\"2\xE43\xE5+A$7C+7%7L+-%7C+#%'$%$$# !$## !$\"# !\"# !,R&!.\xE4\"\"2\xE43\xE5+A$7C+7%7L+-%7C+#%'$%$$# !$## !$\"# !\"# !\"+I%.\xE4\"\"2\xE43\xE5*# \" ,+3%7C+)%4%6%%\"$\"%$%# !$$# !$## !$\"# !\"# !*n \"!7L+R$7C+H%.\xE4\"\"2\xE43\xE5*# \" ,+2%7C+(%4$6\xE6$!#%$$# !$## !$\"# !\"# !*. \"!7C+& 4!6*! %"),
          peg$decode("!.\xE7\"\"2\xE73\xE8*) \".\xE9\"\"2\xE93\xEA+\x8C$.\xEB\"\"2\xEB3\xEC+|%7C+r%!70+! (%+b%7C+X%.\xED\"\"2\xED3\xEE+H%7C+>%7 +4%7C+*%4)6\xEF)#(%!%$)# !$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !*\u0199 \"!7 +\u0153$7C+\u0149%./\"\"2/30*5 \".\xF0\"\"2\xF03\xF1*) \".\xF2\"\"2\xF23\xF3+\u0121%7C+\u0117%7 +\u010D%7C+\u0103% \"!.#\"\"2#3$+u$7C+k%!70+! (%+[%7C+Q%./\"\"2/30+A%7C+7%7 +-%7C+#%'(%$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !,\x86&!.#\"\"2#3$+u$7C+k%!70+! (%+[%7C+Q%./\"\"2/30+A%7C+7%7 +-%7C+#%'(%$(# !$'# !$&# !$%# !$$# !$## !$\"# !\"# !\"++%4'6\xF4'$&$\" %$'# !$&# !$%# !$$# !$## !$\"# !\"# !*X \"!!70+! (%+G$7C+=%7 +3%7C+)%4$6\xF5$\"#!%$$# !$## !$\"# !\"# !")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 45 + index,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


        var BINARY = {
            "**": "pow",
            "//": "root",
            "%%": "log",
            "*": "mul",
            "/": "div",
            "%": "mod",
            "rem": "rem",
            "+": "add",
            "-": "sub",
            "<": "lt",
            ">": "gt",
            "<=": "le",
            ">=": "ge",
            "==": "equals",
            "<=>": "compare",
            "??": "default",
            "&&": "and",
            "||": "or",
            "<-": "bind",
            "<->": "bind2",
            ":": "assign"
        };

        var UNARY = {
            "+": "toNumber",
            "-": "neg",
            "!": "not",
            "^": "parent"
        };

        var BLOCKS = {
            "map": "mapBlock",
            "filter": "filterBlock",
            "some": "someBlock",
            "every": "everyBlock",
            "sorted": "sortedBlock",
            "sortedSet": "sortedSetBlock",
            "group": "groupBlock",
            "groupMap": "groupMapBlock",
            "min": "minBlock",
            "max": "maxBlock"
        };

        var STATEMENTS = {
            ":": "assign",
            "<-": "bind",
            "<->": "bind2"
        };



    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();